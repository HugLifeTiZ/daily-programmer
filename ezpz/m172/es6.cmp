#!/usr/bin/env node
require("traceur");
require("sugar");
Object.extend();
var $__0 = $traceurRuntime.assertObject(require("fs")),
    readFileSync = $__0.readFileSync,
    writeFileSync = $__0.writeFileSync;
if (process.argv.length < 3) {
  console.log("Requires an output filename and then some words.");
  process.exit(1);
} else if (process.argv.length < 4) {
  console.log("Display mode. If it's too long, use imagemagick's display.");
  readFileSync(process.argv[2]).toString().lines().slice(2).map((function(row) {
    return row.chars().reduce((function(prev, current) {
      return prev + (current == 1 ? "█" : "░");
    }), "");
  })).each((function(row) {
    return console.log(row);
  }));
} else {
  try {
    throw undefined;
  } catch (font) {
    {
      font = readFileSync("font.txt").toString().lines().inGroupsOf(8).reduce((function(font, chr) {
        if (chr.length == 8) {
          $traceurRuntime.setProperty(font, chr[0] || " ", chr.slice(1).map((function(row) {
            return row.remove(/[\s]/g);
          })));
        }
        return font;
      }), {});
      var word = process.argv.slice(3).join(" ").chars().filter((function(char) {
        return $traceurRuntime.toProperty(char) in font;
      })).map((function(letter) {
        return font[$traceurRuntime.toProperty(letter)];
      }));
      word = word[0].map((function(_, idx) {
        return word.map((function(letter) {
          return letter[$traceurRuntime.toProperty(idx)];
        })).join("0");
      }));
      var pix = ["P1", word[0].length + " " + word.length].add(word);
      writeFileSync(process.argv[2], pix.join("\n"));
      console.log("Wrote PBM to %s.", process.argv[2]);
    }
  }
}
